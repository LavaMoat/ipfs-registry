use std::path::PathBuf;
use thiserror::Error;
use url::Url;

/// Errors thrown by the server library.
#[derive(Debug, Error)]
pub enum Error {
    /// Error generated when a path is not a file.
    #[error("path {0} is not a file")]
    NotFile(PathBuf),

    /// Error generated when a path is not a directory.
    #[error("not a directory {0}")]
    NotDirectory(PathBuf),

    /// Error generated when a host is invalid.
    #[error("host for URL {0} is invalid")]
    InvalidHost(Url),

    /// Error generated when a port is invalid.
    #[error("port for URL {0} is invalid")]
    InvalidPort(Url),

    /// Error generated when a scheme is not recognised.
    #[error("not a recognised scheme {0}")]
    InvalidScheme(String),

    /// Error generated when an artifact could not be retrieved.
    #[error("artifact could not be found for {0} ({1:?}), possibly layer configuration has been changed")]
    ArtifactNotFound(String, Option<String>),

    /// Error generated when no storage layers are configured.
    #[error("no storage layers, check configuration")]
    NoStorageLayers,

    /// Error generated when an object key is the wrong kind.
    #[error("wrong kind of object key for the layer")]
    BadObjectKey,

    /// Error generated when an object is missing from a storage layer.
    #[error("object {0} is not available")]
    ObjectMissing(String),

    /// Error generated when webhooks are configured without a password for the signing key.
    #[error("webhooks are configured but IPKG_WEBHOOK_KEYSTORE_PASSWORD is not set")]
    WebHookKeystorePassword,

    /// Error generated by the io module.
    #[error(transparent)]
    Io(#[from] std::io::Error),

    /// Error generated by the address library.
    #[error(transparent)]
    Address(#[from] web3_address::Error),

    /// Error generated deserializing from TOML.
    #[error(transparent)]
    TomlDeser(#[from] toml::de::Error),

    /// Error generated by the JSON library.
    #[error(transparent)]
    Json(#[from] serde_json::Error),

    /// Error generated attempting to parse a socket address.
    #[error(transparent)]
    AddrParse(#[from] std::net::AddrParseError),

    /// Error generated when a header value is invalid.
    #[error(transparent)]
    HeaderValue(#[from] axum::http::header::InvalidHeaderValue),

    /// Error generated when by the HTTP library.
    #[error(transparent)]
    Http(#[from] axum::http::Error),

    /// Error generated by the IPFS library.
    #[error(transparent)]
    Ipfs(#[from] ipfs_api_backend_hyper::Error),

    /// Error generated parsing MIME type.
    #[error(transparent)]
    Mime(#[from] mime::FromStrError),

    /// Error generated converting from a slice.
    #[error(transparent)]
    TryFromSlice(#[from] std::array::TryFromSliceError),

    /// Error generated by the ECDSA library.
    #[error(transparent)]
    Ecdsa(#[from] k256::ecdsa::Error),

    /// Error generated by the request library when the TLS transport fails.
    #[error(transparent)]
    Tls(#[from] rusoto_core::request::TlsError),

    /// Error generated by the AWS credentials library.
    #[error(transparent)]
    Credentials(#[from] rusoto_core::credential::CredentialsError),

    /// Error generated getting an object from S3.
    #[error(transparent)]
    GetObject(#[from] rusoto_core::RusotoError<rusoto_s3::GetObjectError>),

    /// Error generated getting bucket information from S3.
    #[error(transparent)]
    HeadBucket(#[from] rusoto_core::RusotoError<rusoto_s3::HeadBucketError>),

    /// Error generated putting an object to S3.
    #[error(transparent)]
    PutObject(#[from] rusoto_core::RusotoError<rusoto_s3::PutObjectError>),

    /// Error generated parsing an S3 region.
    #[error(transparent)]
    ParseRegion(#[from] rusoto_signature::region::ParseRegionError),

    /// Error generated by the SQL library.
    #[error(transparent)]
    Sql(#[from] sqlx::Error),

    /// Error generated running SQL migrations.
    #[error(transparent)]
    Migrate(#[from] sqlx::migrate::MigrateError),

    /// Error generated by the CID library.
    #[error(transparent)]
    Cid(#[from] cid::Error),

    /// Error generated by the HTTP client library.
    #[error(transparent)]
    Request(#[from] reqwest::Error),

    /// Error generated by the keystore library.
    #[error(transparent)]
    Keystore(#[from] web3_keystore::KeyStoreError),
}
